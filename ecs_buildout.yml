---
# This playbook contains build out of ECS Service. Currently, deploys an single container with a simple apache webserver
# Opted to use awsvpc as the network as this significantly increases the number of containers as the limit is now based on number of IPs in subnet; increasing scalability
# https://aws.amazon.com/blogs/compute/optimizing-amazon-ecs-task-density-using-awsvpc-network-mode/
- hosts: localhost
  vars:
    aws_region: us-east-1
  tasks:
    - name: Create ECS Cluster
      ecs_cluster:
        name: sc-prod-cluster
        region: "{{aws_region}}"
        state: present
      register: sc_cluster

    - name: Create EC2 Instances for Cluster
      ec2_instance:
        name: "sc_ecs_host_{{item}}"
        vpc_subnet_id: "{{item}}"
        region: "{{aws_region}}"
        key_name: "SC_ECS_Bastion"
        instance_type: "t2.micro"
        instance_role: "{{ec2_ecs_access_role.iam_role.role_name}}"
        image_id: "ami-07a63940735aebd38"
        security_group: "{{ sc_ecscluster_sg.group_name}}"
        user_data: |
                  #!/bin/bash
                  echo ECS_CLUSTER={{sc_cluster.cluster.clusterName}} >> /etc/ecs/ecs.config
        wait: yes
        state: present
        tags:
          Name: "sc_ecs_host_{{item}}"
      with_items:
      - "{{private_subnet_1.subnet.id}}"
      - "{{private_subnet_2.subnet.id}}"
      register: sc_ecs_instances
      async: 7200
      poll: 0

    - name: Wait for instance creation to complete
      async_status: jid={{ item.ansible_job_id }}
      register: ec2_jobs
      until: ec2_jobs.finished
      retries: 300
      with_items: "{{sc_ecs_instances.results}}"
      when: sc_ecs_instances.results | length > 0

    - name: sleep to let EC2 instance connect to ECS Cluster
      wait_for:
        timeout: 60
      delegate_to: localhost

    - name: Create task definition
      ecs_taskdefinition:
        network_mode: awsvpc
        containers:
        - name: simple-app
          cpu: 10
          essential: true
          image: "httpd:2.4"
          memory: 300
          mountPoints:
          - containerPath: /usr/local/apache2/htdocs
            sourceVolume: my-vol
          portMappings:
          - containerPort: 80
            hostPort: 80
        - name: busybox
          command:
            - >
              /bin/sh -c "while true; do echo '<html><head><title>Amazon ECS Sample App</title></head><body><div><h1>Amazon ECS Sample App</h1><h2>Congratulations!
              </h2><p>Your application is now running on a container in Amazon ECS.</p>' > top; /bin/date > date ; hostname -i > ipaddr; echo '</div></body></html>' > bottom;
              cat top date bottom ipaddr > /usr/local/apache2/htdocs/index.html ; sleep 1; done"
          cpu: 10
          entryPoint:
          - sh
          - "-c"
          essential: false
          image: busybox
          memory: 200
          volumesFrom:
          - sourceContainer: simple-app
        volumes:
        - name: my-vol
        family: test-cluster-taskdef
        state: present
        region: "{{aws_region}}"
      register: task_output

    - name: create ECS Service
      ecs_service:
        state: present
        name: sc-prod-service
        region: "{{aws_region}}"
        cluster: sc-prod-cluster
        task_definition: "{{task_output.taskdefinition.family}}:{{task_output.taskdefinition.revision}}"
        load_balancers:
          - targetGroupArn: "{{sc_ecscluster_tg.target_group_arn}}"
            containerName: simple-app
            containerPort: 80
        desired_count: 2
        network_configuration:
          security_groups: "{{ sc_ecscluster_sg.group_id}}"
          subnets:
          - "{{private_subnet_1.subnet.id}}"
          - "{{private_subnet_2.subnet.id}}"