---
- hosts: localhost
  vars:
    aws_region: us-east-1
  tasks:
    ### Network
    - name: SpyCloud Challenge
      ec2_vpc_net:
        name: SCVPC
        cidr_block: 10.10.0.0/16
        region: "{{aws_region}}"
        tags:
          module: ec2_vpc_net
          this: works
      register: spycloud_vpc

    - name: Create Internet Gateway
      ec2_vpc_igw:
        vpc_id: "{{ spycloud_vpc.vpc.id }}"
        region: "{{aws_region}}"
        state: present
      register: sc_igw

    - name: Create Public Subnet 1
      ec2_vpc_subnet:
        state: "present"
        vpc_id: "{{ spycloud_vpc.vpc.id }}"
        cidr: 10.10.16.0/20
        region: "{{aws_region}}"
        az: "{{aws_region}}a"
        tags:
          Name: "Public_Subnet_1"
        wait: true
      register: public_subnet1

    - name: Create Public Subnet 2
      ec2_vpc_subnet:
        state: "present"
        vpc_id: "{{ spycloud_vpc.vpc.id }}"
        cidr: 10.10.32.0/20
        region: "{{aws_region}}"
        az: "{{aws_region}}b"
        tags:
          Name: "Public_Subnet_2"
        wait: true
      register: public_subnet2

    - name: Create Public Route Table
      ec2_vpc_route_table:
        vpc_id: "{{spycloud_vpc.vpc.id}}"
        region: "{{aws_region}}"
        tags:
          Name: sc-public-route-table
        subnets:
        - "{{public_subnet1.subnet.id}}"
        - "{{public_subnet2.subnet.id}}"
        routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{sc_igw.gateway_id}}"

    - name: Create Private Subnet 1
      ec2_vpc_subnet:
        state: "present"
        vpc_id: "{{ spycloud_vpc.vpc.id }}"
        cidr: 10.10.0.0/20
        region: "{{aws_region}}"
        az: "{{aws_region}}a"
        tags:
          Name: "Private_Subnet_1"
        wait: yes
      register: private_subnet_1

    - name: Create Private Subnet 2
      ec2_vpc_subnet:
        state: "present"
        vpc_id: "{{ spycloud_vpc.vpc.id }}"
        cidr: 10.10.48.0/20
        region: "{{aws_region}}"
        az: "{{aws_region}}b"
        tags:
          Name: "Private_Subnet_2"
        wait: yes
      register: private_subnet_2

    - name: Create NAT gateway for Public Subnet 1
      ec2_vpc_nat_gateway:
        state: present
        subnet_id: "{{public_subnet1.subnet.id}}"
        wait: yes
        region: "{{aws_region}}"
        if_exist_do_not_create: true
      register: sc_ngw_1

    - name: Create NAT gateway for Public Subnet 2
      ec2_vpc_nat_gateway:
        state: present
        subnet_id: "{{public_subnet2.subnet.id}}"
        wait: yes
        region: "{{aws_region}}"
        if_exist_do_not_create: true
      register: sc_ngw_2

    - name: Create Private Route Table 1 For Public NAT 1
      ec2_vpc_route_table:
        vpc_id: "{{spycloud_vpc.vpc.id}}"
        region: "{{aws_region}}"
        tags:
          Name: sc-private-route-table-ngw-1
        subnets:
        - "{{private_subnet_1.subnet.id}}"
        routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{sc_ngw_1.nat_gateway_id}}"
      register: sc_private_route_table_1_ngw_1

    - name: Create Private Route Table 2 For For Public NAT 2
      ec2_vpc_route_table:
        vpc_id: "{{spycloud_vpc.vpc.id}}"
        region: "{{aws_region}}"
        tags:
          Name: sc-private-route-table-ngw-2
        subnets:
        - "{{private_subnet_2.subnet.id}}"
        routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{sc_ngw_2.nat_gateway_id}}"
      register: sc_private_route_table_2_ngw_2

    ### Security
    - name: Create EC2 Role to Launch ECS containers
      iam_role:
        name: EC2_ECS_ACCESS
        assume_role_policy_document:
          Version: '2008-10-17'
          Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
        description:  EC2 Role to Launch ECS containers
        managed_policy:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      register: ec2_ecs_access_role

    - name: Creating Security Group for communicating with ECS Cluster
      ec2_group:
        name: SC_ECSClusterSecurityGroup
        description: "ECS Cluster Security Group"
        vpc_id: "{{spycloud_vpc.vpc.id}}"
        region: "{{aws_region}}"
        rules:
          - proto: tcp
            ports:
            - 80
            - 443
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 80 and 443
      register: sc_ecscluster_sg

    # Created bastion to ssh into ECS instances for general maintence.
    - name: Create EC2 Bastion
      ec2_instance:
        name: "sc_bastion"
        vpc_subnet_id: "{{public_subnet1.subnet.id}}"
        region: "{{aws_region}}"
        key_name: "SC_ECS_Bastion"
        instance_type: "t2.micro"
        image_id: "ami-062f7200baf2fa504"
        network:
          assign_public_ip: true
        state: present
        wait: yes
      register: sc_bastion

    ### Loadbalacer
    - name: Create Target Group
      elb_target_group:
        name: "SC-ECSClusterTG"
        region: "{{aws_region}}"
        protocol: http
        port: 80
        vpc_id: "{{ spycloud_vpc.vpc.id }}"
        target_type: ip
        state: present
      register: sc_ecscluster_tg
        
    - name: Create Loadbalacer
      elb_application_lb:
        name: SC-ECSClusterLB
        region: "{{aws_region}}"
        security_groups:
          - "{{ sc_ecscluster_sg.group_id}}"
        subnets:
          - "{{public_subnet1.subnet.id}}"
          - "{{public_subnet2.subnet.id}}"
        listeners:
          - Protocol: HTTP
            Port: 80 
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{sc_ecscluster_tg.target_group_name}}"
        state: present
